---
import { z } from "zod";
import { getCountries } from "libphonenumber-js";

async function getUserIP() {
  try {
    const res = await fetch("https://api64.ipify.org?format=json");
    const data = await res.json();
    return data.ip || "0.0.0.0";
  } catch (error) {
    console.error("Error obteniendo IP:", error);
    return "0.0.0.0";
  }
}

function getDeviceType() {
  const userAgent = navigator.userAgent;
  if (/Mobi|Android/i.test(userAgent)) return "móvil";
  return "escritorio";
}

function getFlagEmoji(countryCode) {
  const codePoints = countryCode
    .toUpperCase()
    .split("")
    .map((char) => 127397 + char.charCodeAt());
  return String.fromCodePoint(...codePoints);
}

const countries = getCountries()
  .map((country) => ({
    code: country,
    name: new Intl.DisplayNames(["es"], { type: "region" }).of(country),
    flag: getFlagEmoji(country),
  }))
  .sort((a, b) => a.name.localeCompare(b.name));

const formSchema = z.object({
  email: z.string().email("Correo inválido"),
  nombre: z.string().min(2, "Nombre muy corto"),
  apellido: z.string().min(2, "Apellido muy corto"),
  telefono: z.string().optional(),
  countryCode: z.string(),
  aceptaTerminos: z.literal(true, {
    errorMap: () => ({ message: "Debes aceptar los términos" }),
  }),
});
---


  <form method="POST" class="form-container">
    <div class="form-group">
      <label for="email">Correo*:</label>
      <input type="email" id="email" name="email" required class="form-input" />
    </div>
  
    <div class="form-group">
      <label for="nombre">Nombres*:</label>
      <input type="text" id="nombre" name="nombre" required class="form-input" />
    </div>
  
    <div class="form-group">
      <label for="apellido">Apellidos*:</label>
      <input
        type="text"
        id="apellido"
        name="apellido"
        required
        class="form-input"
      />
    </div>
  
    <div class="form-group phone-group">
      <label for="telefono">Teléfono*:</label>
      <div class="phone-input-container">
        <select name="countryCode" id="countryCode" class="country-select">
          {
            countries.map((country) => (
              <option value={country.code}>
                {country.flag} {country.name} (+{country.code})
              </option>
            ))
          }
        </select>
        <input
          type="tel"
          id="telefono"
          name="telefono"
          class="form-input phone-input"
        />
      </div>
    </div>
  
    <div class="form-group checkbox-group">
      <div class="checkbox-wrapper-12">
        <div class="cbx">
          <input 
          type="checkbox"
          id="aceptaTerminos"
          name="aceptaTerminos"
          required
          />
          <label for="cbx-12"></label>
          <svg width="15" height="14" viewbox="0 0 15 14" fill="none">
            <path d="M2 8.36364L6.23077 12L13 2"></path>
          </svg>
        </div>
        <!-- Gooey-->
        <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
          <defs>
            <filter id="goo-12">
              <fegaussianblur in="SourceGraphic" stddeviation="4" result="blur"></fegaussianblur>
              <fecolormatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 22 -7" result="goo-12"></fecolormatrix>
              <feblend in="SourceGraphic" in2="goo-12"></feblend>
            </filter>
          </defs>
        </svg>
      </div>
      <label for="aceptaTerminos" class="checkbox-label"
        >Acepto el uso de datos personales</label
      >
    </div>
  
    <button type="submit" class="submit-button">Enviar</button>
  </form>


<script>
  document
    .querySelector(".form-container")
    .addEventListener("submit", async (e) => {
      e.preventDefault(); // Evitar que se envíe el formulario tradicional

      // Obtener datos del formulario
      const formData = new FormData(e.target);
      const data = Object.fromEntries(formData);

      // Obtener la IP y tipo de dispositivo
      const ip = await fetch("https://api64.ipify.org?format=json")
        .then((res) => res.json())
        .then((data) => data.ip);
      const dispositivo = /Mobi|Android/i.test(navigator.userAgent)
        ? "móvil"
        : "escritorio";

      // Formatear el teléfono
      const telefono = data.telefono
        ? `+${data.countryCode}${data.telefono.replace(/\D/g, "")}`
        : "";

      // Crear el payload de acuerdo a la estructura requerida
      const payload = {
        respuestas: [
          {
            formulario_id: 1,
            datos_personales: {
              nombre: data.nombre,
              apellido: data.apellido,
              contacto: {
                celular: telefono,
                correo: data.email,
              },
            },
            metadata: {
              acepta_terminos: data.aceptaTerminos === "on",
              ip_registro: ip || "0.0.0.0",
              dispositivo: dispositivo,
            },
          },
        ],
      };

      try {
        const response = await fetch(
          "http://192.168.1.88:8001/api/formularios/api-v1-formularios/",
          {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload), // Enviar como JSON
          }
        );

        if (response.ok) {
          console.log("Formulario enviado correctamente");
        } else {
          console.error("Error al enviar formulario");
        }
      } catch (error) {
        console.error("Error al procesar el formulario:", error);
      }
    });
</script>

<style>

  .form-container {
    max-width: 500px;
    margin: 0 auto;
    
  }
  .form-group {
    margin-bottom: 1.5rem;
  }

  @font-face {
    font-family: 'Outfit';
    src: url('src/assets/fonts/Outfit/static/Outfit-Bold.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;
  }
  .form-input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 10px;
    font-size: 1rem;
    font-family: 'Outfit', sans-serif;
  }
  .phone-group {
    display: flex;
    flex-direction: column;
  }
  .phone-input-container {
    display: flex;
    gap: 0.5rem;
    font-family: 'Outfit', sans-serif;
  }
  .country-select {
    width: 40%;
    padding: 0.5rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 1rem;
    font-family: 'Outfit', sans-serif;
  }
  .phone-input {
    width: 60%;
  }
  .checkbox-group {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  .checkbox-input {
    width: 1.2rem;
    height: 1.2rem;
  }
  .checkbox-label {
    font-size: 0.9rem;
    color: #666;
    font-family: 'Outfit', sans-serif;
  }
  .submit-button {
    width: 100%;
    padding: 0.75rem;
    background-color: #917783;
    color: white;
    border: none;
    border-radius: 10px;
    font-size: 1rem;
    cursor: pointer;
    transition: background-color 0.2s;
  }
  .submit-button:hover {
    background-color: #4338ca;
  }
  label {
    display: block;
    margin-bottom: 0.5rem;
    color: #374151;
    font-weight: 500;
    font-family: 'Outfit', sans-serif;
  }
  select option {
    font-family: "Segoe UI Emoji", "Segoe UI Symbol", "Apple Color Emoji",
      "Twemoji Mozilla", "Noto Color Emoji", "Android Emoji", sans-serif;
  }


  /* --------------------------------------------------------------------------*/
  .checkbox-wrapper-12 {
    position: relative;
  }
  .checkbox-wrapper-12 > svg {
    position: absolute;
    top: -130%;
    left: -170%;
    width: 110px;
    pointer-events: none;
  }
  .checkbox-wrapper-12 * {
    box-sizing: border-box;
  }
  .checkbox-wrapper-12 input[type="checkbox"] {
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;
    -webkit-tap-highlight-color: transparent;
    cursor: pointer;
    margin: 0;
  }
  .checkbox-wrapper-12 input[type="checkbox"]:focus {
    outline: 0;
  }
  .checkbox-wrapper-12 .cbx {
    width: 24px;
    height: 24px;
    top: calc(50vh - 12px);
    left: calc(50vw - 12px);
  }
  .checkbox-wrapper-12 .cbx input {
    position: absolute;
    top: 0;
    left: 0;
    width: 24px;
    height: 24px;
    border: 2px solid white;
    border-radius: 50%;
  }
  .checkbox-wrapper-12 .cbx label {
    width: 24px;
    height: 24px;
    background: none;
    border-radius: 50%;
    position: absolute;
    top: 0;
    left: 0;
    -webkit-filter: url("#goo-12");
    filter: url("#goo-12");
    transform: trasnlate3d(0, 0, 0);
    pointer-events: none;
  }
  .checkbox-wrapper-12 .cbx svg {
    position: absolute;
    top: 5px;
    left: 4px;
    z-index: 1;
    pointer-events: none;
  }
  .checkbox-wrapper-12 .cbx svg path {
    stroke: #fff;
    stroke-width: 3;
    stroke-linecap: round;
    stroke-linejoin: round;
    stroke-dasharray: 19;
    stroke-dashoffset: 19;
    transition: stroke-dashoffset 0.3s ease;
    transition-delay: 0.2s;
  }
  .checkbox-wrapper-12 .cbx input:checked + label {
    animation: splash-12 0.6s ease forwards;
  }
  .checkbox-wrapper-12 .cbx input:checked + label + svg path {
    stroke-dashoffset: 0;
  }
  @-moz-keyframes splash-12 {
    40% {
      background: #917783;
      box-shadow: 0 -18px 0 -8px #917783, 16px -8px 0 -8px #917783, 16px 8px 0 -8px #917783, 0 18px 0 -8px #917783, -16px 8px 0 -8px #917783, -16px -8px 0 -8px #917783;
    }
    100% {
      background: #917783;
      box-shadow: 0 -36px 0 -10px transparent, 32px -16px 0 -10px transparent, 32px 16px 0 -10px transparent, 0 36px 0 -10px transparent, -32px 16px 0 -10px transparent, -32px -16px 0 -10px transparent;
    }
  }
  @-webkit-keyframes splash-12 {
    40% {
      background: #917783;
      box-shadow: 0 -18px 0 -8px #917783, 16px -8px 0 -8px #917783, 16px 8px 0 -8px #917783, 0 18px 0 -8px #917783, -16px 8px 0 -8px #917783, -16px -8px 0 -8px #917783;
    }
    100% {
      background: #917783;
      box-shadow: 0 -36px 0 -10px transparent, 32px -16px 0 -10px transparent, 32px 16px 0 -10px transparent, 0 36px 0 -10px transparent, -32px 16px 0 -10px transparent, -32px -16px 0 -10px transparent;
    }
  }
  @-o-keyframes splash-12 {
    40% {
      background: #917783;
      box-shadow: 0 -18px 0 -8px #917783, 16px -8px 0 -8px #917783, 16px 8px 0 -8px #917783, 0 18px 0 -8px #917783, -16px 8px 0 -8px #917783, -16px -8px 0 -8px #917783;
    }
    100% {
      background: #917783;
      box-shadow: 0 -36px 0 -10px transparent, 32px -16px 0 -10px transparent, 32px 16px 0 -10px transparent, 0 36px 0 -10px transparent, -32px 16px 0 -10px transparent, -32px -16px 0 -10px transparent;
    }
  }
  @keyframes splash-12 {
    40% {
      background: #917783;
      box-shadow: 0 -18px 0 -8px #917783, 16px -8px 0 -8px #917783, 16px 8px 0 -8px #917783, 0 18px 0 -8px #917783, -16px 8px 0 -8px #917783, -16px -8px 0 -8px #917783;
    }
    100% {
      background: #917783;
      box-shadow: 0 -36px 0 -10px transparent, 32px -16px 0 -10px transparent, 32px 16px 0 -10px transparent, 0 36px 0 -10px transparent, -32px 16px 0 -10px transparent, -32px -16px 0 -10px transparent;
    }
  }
</style>
